<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title><![CDATA[Musings of A Moderate Code and Copyright Maverick]]></title>
        <description><![CDATA[I'm a high school student who codes, sings, plays clarinet, writes music, and writes words. When I write words, I usually write them about Linuxy things. And sometimes other things.]]></description>
        <link>http://zippynk.github.io</link>
        <generator>RSS for Node</generator>
        <lastBuildDate>Mon, 29 Jun 2015 04:07:47 GMT</lastBuildDate>
        <author><![CDATA[Nathan Krantz-Fire]]></author>
        <language><![CDATA[en]]></language>
        <item>
            <title><![CDATA[Linux Wants To Be Free]]></title>
            <description><![CDATA[Why that's a problem, and who's doing what to solve it

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;In my last post, I wrote about problems with consumer open source software. However, regardless of the quality of their open source programs, one would still expect Linux-based systems to be usable with proprietary components, if only the companies that made said components ported them to Linux. Increasingly, we see them doing this, but they, and we, run into problems due to the open and gratis-oriented design of Linux and its counterparts.</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;If you run any Linux distribution not related to Ubuntu, and try to run proprietary and/or paid software on it, you have probably experienced some frustration. Developers, when they first port to Linux-based systems, build their software to run on Ubuntu and other Debian-based distributions. On good days, they will sometimes port to RPM distros. The Linux user base, on the other hand, wants to use more than just Ubuntu and Red Hat.</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The Linux “distro” model has no problem with distributing gratis, open source software. In this case, users eventually port the software to other distributions, since the license permits it, and they do not have to worry about collecting money. This works when people only use software that uses an open license and has no cost.</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Problems occur when proprietary developers try to offer software for the platform. Closed source software, for the most part, does not permit customers to re-package it, and the company at the center of it does not have time to distribute the software to less-popular distributions, causing it to stay in the Red Hat-Ubuntu zone, with sometimes some questionably-legal ports to other distros.</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The standard package managers do not make it any easier. Users want, and expect, to be able to install software by typing <code>packagemanager install package</code>, but since most package managers work primarily with unauthenticated file transfers, this standard assumes that the developer has made the software available publically, and therefore free of charge. Other platforms do not have this problem. Some, like iOS, have an official app store that accepts both free and paid apps. Others, like many J2ME-based platforms, have no serious app store, but use an easily-executable app file format. Some, like Mac OS X and Windows, do both. Linux, on the other hand, does neither*, and instead relies on an internally-sourced package management system meant for free-of-charge, freely distributable tools. This makes Linux Package Managers a big roadblock for a proprietary and/or paid cross-platform software developer.</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;So, what can we do to solve this? So far, SUSE, Valve, and Canonical have taken the largest steps in the area, via the <a href="http://openbuildservice.org/">Open Build Service</a>, <a href="http://store.steampowered.com/about/#tuxRight">Steam on Linux</a>, and the <a href="https://wiki.ubuntu.com/SoftwareCenter">Ubuntu Software Center</a>, respectively.</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Valve and Canonical have both created integrated stores for Linux software, and both stores accept paid apps, making the payment issue less of a hindrance. However, these stores often have specialized purposes. Valve built Steam primarily for games (although they have since <a href="http://thenextweb.com/apps/2012/10/02/valve-is-no-longer-just-about-games-software-is-now-available-on-steam/">extended it to cover other types of software</a>), and the Ubuntu Software Center only runs on Ubuntu and a few derivative distributions. If we want to make progress with proprietary software on Linux, then we need to de-specialize stores like these, making them available for (and welcoming to) all types of software and distributions.</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SUSE, on the other hand, has tackled the problem of distro fragmentation. They built the Open Build Service, which allows developers to build and package their software for various different distributions. Despite the intention of this service’s use for open source software, SUSE has released the source code for the underlying platform itself. This means that developers can set up their own instances, modifying the platform as necessary, to distribute proprietary software.</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;That said, in order to fully embrace proprietary software, Linux users have to realize one more thing: It will not always be beautifully packaged. Developers that have experience coding for other operating systems want to keep the freedom of setting up their own, ugly, proprietary installers, and not sticking to packaging guidelines. If Linux users want proprietary software, they have to take the whole package: non-standardized installers and uninstallers, separate help systems, a lack of complete system integration into every possible custom configuration, etc. This understanding from the users, more than anything else, allows software developers to distribute their software effectively.</p>
<p>* Some Linux distributions, such as Ubuntu, have software stores. However, these lack standardization and wide acceptance, and work exclusively on one distribution (plus derivatives). Others have somewhat-convenient formats, such as .deb and .rpm, but these, again, lack standardization, and also tend to cause more hiccups than the .app files from Mac OS or the .exe files from Windows.</p>
]]></description>
            <link>http://zippynk.github.io/linux-wants-to-be-free.html</link>
            <guid isPermaLink="true">http://zippynk.github.io/linux-wants-to-be-free.html</guid>
            <dc:creator><![CDATA[Nathan Krantz-Fire]]></dc:creator>
            <pubDate>Sun, 28 Jun 2015 07:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Why Open Source Consumer Software Lacks Quality]]></title>
            <description><![CDATA[An essay.

<p>Note: I do not intend this as an insult to open source software for enterprise or consumers, or any of the people or companies that develop or use it. Given the recourses it has, open source software works well. However, I attempt to explain why it sometimes lags in the consumer market.</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Over four decades of Free and Open source software, a trend has prevailed: Linux works well on the server, but fails to meet the expectations of average users. Several trends cause this. Open source software sells more easily to enterprise users, who often use it on servers, the developers write it to serve their own needs, which usually involve technical matters, and writing code for non-technical users takes more time and effort, which does not come easily amongst volunteers and underpaid employees.</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Open source sells, primarily, to enterprise markets. While consumers, whenever they can, will opt to get products for free, enterprises know the importance of, and can afford, paid support. Companies that develop open source software know this, and tailor it to enterprise users, where they can get more revenue. Red Hat and Ubuntu exemplify this. Red Hat, which develops primarily for enterprise, <a href="https://gigaom.com/2014/12/19/red-hats-success-aside-its-hard-to-profit-from-free/">makes about 50 million dollars in profit per quarter</a>. Canonical, in contrast, makes both Enterprise and Consumer software, but primarily Consumer software. It <a href="http://arstechnica.com/business/2014/01/ubuntu-maker-boosted-revenue-in-2013-but-doubled-loss-to-21-million/">still did not make a profit</a> as of 2013, nearly a decade after its founding. Mark Shuttleworth, Canonical’s founder, has also said that <a href="http://arstechnica.com/information-technology/2013/08/why-ubuntus-creator-still-invests-his-fortune-in-an-unprofitable-company/">if Canonical discontinued its desktop platform and focused on enterprise, it would make a profit</a>. Although Canonical chose to avoid taking this route at its own loss, many other companies, understandably, take it, causing the majority of corporate-developed open source software to target enterprise users, servers, and developers.</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Additionally, one needs to keep in mind who writes the software, and why they write it. Developers write software, and they usually either write it for money or for their own use. In the traditional, closed-source software world, programmers regularly charge for software to monetize it. This means that developers will write the software that gets them the largest audience. Most of the time, they write for consumers. However, in the open source world, programmers have to work much harder to make money off of their software. Many choose, instead, to write software for fun, or for their own usage. Since the job of developing software selects for developers, and since developers have both different types of software that they need and a higher tolerance for bugs, code written for their own purpose often means rough, developer-oriented, and overall non-consumer-friendly code.</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Lastly, open source code continues to face the dilemma that it always faced. With moderate quality comes moderate monetary price, and with great quality comes great monetary price. However, this problem presents itself in a more easily solvable way in the case of developer-oriented software, because developer-oriented software takes less work to write. A command line utility takes less work than a GUI application, since graphic design and user interfaces pose less of an issue than they pose with graphical applications. In addition, as mentioned before, developers have less aversion to dealing with and reporting bugs in the software they use, which removes workload from the developers working on the project. Some of these developer users may go on to work on the project as an official developer. Overall, this decreases the workload on open source developer projects. Therefore, developer-oriented projects get developed more easily than consumer-oriented ones.</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;In the FLOSS world, enterprise, developer, and server software surpasses consumer software in quality due to easier monetization, higher enthusiasm from its developers, and lower development diffuculty.</p>
]]></description>
            <link>http://zippynk.github.io/why-open-source-consumer-software-lacks-quality.html</link>
            <guid isPermaLink="true">http://zippynk.github.io/why-open-source-consumer-software-lacks-quality.html</guid>
            <dc:creator><![CDATA[Nathan Krantz-Fire]]></dc:creator>
            <pubDate>Thu, 04 Jun 2015 07:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Hello World, and Some Prerequisites]]></title>
            <description><![CDATA[

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;It seems customary that whenever someone writes a blog, they start out by writing a post titled, “Hello world!”. Some <a href="https://hardmath123.github.io/hw.html">follow with a series of hello world programs</a>, while others <a href="http://bobbybee.github.io/Hello-World.html">analyze the practice</a>.</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;I have decided, rather than to do either of these, to post a list of prerequisites - statements, opinions, and warnings about what to expect on this blog, since a lot of the content will involve naming controversies. And other similar things we should all spend less time arguing about. I will update the list as needed later.</p>
<p>Prerequisite Statements for This Blog:</p>
<ul>
<li>There exists a controversy about whether to call it <a href="https://en.wikipedia.org/wiki/Free_and_open-source_software#Controversy">free or open source software</a>, and another similar one about <a href="https://en.wikipedia.org/wiki/GNU/Linux_naming_controversy">whether to call it Linux or GNU/Linux</a>. I have heard both sides of the argument and made the decision to call them open source and Linux, respectively. Although I may sometimes opt for neutral terms like FLOSS and (GNU/)Linux, I likely will not change the basis of my decision any time soon, and if at some point I do, I will not change it because of a knee-jerk contradiction to my word usage.</li>
<li>I’m not a big fan of standardized grammar. I follow it where I can, but I do not go out of my way to follow it. Therefore, some of these posts will have sentances that some people say are incorrect. At some point, perhaps I will elaborate on my opinion about this, but for now, just try to keep non-intrusive grammar errors to yourself. Intrusive thing, but, are importants changing.</li>
<li>Yes, this blog is copyrighted. Yes, I’m considering whether to change it. No, I haven’t changed it yet.</li>
<li>Hello world!</li>
</ul>
]]></description>
            <link>http://zippynk.github.io/prerequisites.html</link>
            <guid isPermaLink="true">http://zippynk.github.io/prerequisites.html</guid>
            <dc:creator><![CDATA[Nathan Krantz-Fire]]></dc:creator>
            <pubDate>Sat, 30 May 2015 07:00:00 GMT</pubDate>
        </item>
    </channel>
</rss>