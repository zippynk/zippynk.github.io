<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title><![CDATA[Musings of A Moderate Code and Copyright Maverick]]></title>
        <description><![CDATA[I'm a high school student who codes, sings, plays clarinet, writes music, and writes words. When I write words, I usually write them about Linuxy things. And sometimes other things.]]></description>
        <link>http://zippynk.github.io</link>
        <generator>RSS for Node</generator>
        <lastBuildDate>Thu, 04 Jun 2015 22:54:18 GMT</lastBuildDate>
        <author><![CDATA[Nathan Krantz-Fire]]></author>
        <language><![CDATA[en]]></language>
        <item>
            <title><![CDATA[Why Open Source Consumer Software Lacks Quality]]></title>
            <description><![CDATA[An essay.

<p>Note: I do not intend this as an insult to open source software for enterprise or consumers, or any of the people or companies that develop or use it. Given the recourses it has, open source software works well. However, I attempt to explain why it sometimes lags in the consumer market.</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Over four decades of Free and Open source software, a trend has prevailed: Linux works well on the server, but fails to meet the expectations of average users. Several trends cause this. Open source software sells more easily to enterprise users, who often use it on servers, the developers write it to serve their own needs, which usually involve technical matters, and writing code for non-technical users takes more time and effort, which does not come easily amongst volunteers and underpaid employees.</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Open source sells, primarily, to enterprise markets. While consumers, whenever they can, will opt to get products for free, enterprises know the importance of, and can afford, paid support. Companies that develop open source software know this, and tailor it to enterprise users, where they can get more revenue. Red Hat and Ubuntu exemplify this. Red Hat, which develops primarily for enterprise, <a href="https://gigaom.com/2014/12/19/red-hats-success-aside-its-hard-to-profit-from-free/">makes about 50 million dollars in profit per quarter</a>. Canonical, in contrast, makes both Enterprise and Consumer software, but primarily Consumer software. It <a href="http://arstechnica.com/business/2014/01/ubuntu-maker-boosted-revenue-in-2013-but-doubled-loss-to-21-million/">still did not make a profit</a> as of 2013, nearly a decade after its founding. Mark Shuttleworth, Canonical’s founder, has also said that <a href="http://arstechnica.com/information-technology/2013/08/why-ubuntus-creator-still-invests-his-fortune-in-an-unprofitable-company/">if Canonical discontinued its desktop platform and focused on enterprise, it would make a profit</a>. Although Canonical chose to avoid taking this route at its own loss, many other companies, understandably, take it, causing the majority of corporate-developed open source software to target enterprise users, servers, and developers.</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Additionally, one needs to keep in mind who writes the software, and why they write it. Developers write software, and they usually either write it for money or for their own use. In the traditional, closed-source software world, programmers regularly charge for software to monetize it. This means that developers will write the software that gets them the largest audience. Most of the time, they write for consumers. However, in the open source world, programmers have to work much harder to make money off of their software. Many choose, instead, to write software for fun, or for their own usage. Since the job of developing software selects for developers, and since developers have both different types of software that they need and a higher tolerance for bugs, code written for their own purpose often means rough, developer-oriented, and overall non-consumer-friendly code.</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Lastly, open source code continues to face the dilemma that it always faced. With moderate quality comes moderate monetary price, and with great quality comes great monetary price. However, this problem presents itself in a more easily solvable way in the case of developer-oriented software, because developer-oriented software takes less work to write. A command line utility takes less work than a GUI application, since graphic design and user interfaces pose less of an issue than they pose with graphical applications. In addition, as mentioned before, developers have less aversion to dealing with and reporting bugs in the software they use, which removes workload from the developers working on the project. Some of these developer users may go on to work on the project as an official developer. Overall, this decreases the workload on open source developer projects. Therefore, developer-oriented projects get developed more easily than consumer-oriented ones.</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;In the FLOSS world, enterprise, developer, and server software surpasses consumer software in quality due to easier monetization, higher enthusiasm from its developers, and lower development diffuculty.</p>
]]></description>
            <link>http://zippynk.github.io/why-open-source-consumer-software-lacks-quality.html</link>
            <guid isPermaLink="true">http://zippynk.github.io/why-open-source-consumer-software-lacks-quality.html</guid>
            <dc:creator><![CDATA[Nathan Krantz-Fire]]></dc:creator>
            <pubDate>Thu, 04 Jun 2015 07:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Hello World, and Some Prerequisites]]></title>
            <description><![CDATA[

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;It seems customary that whenever someone writes a blog, they start out by writing a post titled, “Hello world!”. Some <a href="https://hardmath123.github.io/hw.html">follow with a series of hello world programs</a>, while others <a href="http://bobbybee.github.io/Hello-World.html">analyze the practice</a>.</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;I have decided, rather than to do either of these, to post a list of prerequisites - statements, opinions, and warnings about what to expect on this blog, since a lot of the content will involve naming controversies. And other similar things we should all spend less time arguing about. I will update the list as needed later.</p>
<p>Prerequisite Statements for This Blog:</p>
<ul>
<li>There exists a controversy about whether to call it <a href="https://en.wikipedia.org/wiki/Free_and_open-source_software#Controversy">free or open source software</a>, and another similar one about <a href="https://en.wikipedia.org/wiki/GNU/Linux_naming_controversy">whether to call it Linux or GNU/Linux</a>. I have heard both sides of the argument and made the decision to call them open source and Linux, respectively. Although I may sometimes opt for neutral terms like FLOSS and (GNU/)Linux, I likely will not change the basis of my decision any time soon, and if at some point I do, I will not change it because of a knee-jerk contradiction to my word usage.</li>
<li>I’m not a big fan of standardized grammar. I follow it where I can, but I do not go out of my way to follow it. Therefore, some of these posts will have sentances that some people say are incorrect. At some point, perhaps I will elaborate on my opinion about this, but for now, just try to keep non-intrusive grammar errors to yourself. Intrusive thing, but, are importants changing.</li>
<li>Yes, this blog is copyrighted. Yes, I’m considering whether to change it. No, I haven’t changed it yet.</li>
<li>Hello world!</li>
</ul>
]]></description>
            <link>http://zippynk.github.io/prerequisites.html</link>
            <guid isPermaLink="true">http://zippynk.github.io/prerequisites.html</guid>
            <dc:creator><![CDATA[Nathan Krantz-Fire]]></dc:creator>
            <pubDate>Sat, 30 May 2015 07:00:00 GMT</pubDate>
        </item>
    </channel>
</rss>